#!perl

use strict;
use warnings;
use File::Spec;
use Getopt::Long qw/GetOptions :config bundling/;
use Pod::Usage qw/pod2usage/;
use Config;
use autodie;
use File::Temp 'tempfile';
use Module::Info::File;
use Term::ANSIColor;

#use App::pmgrep;

my $cpanmetadb = 'http://cpanmetadb.appspot.com/v1.0/package';

my @inc = @INC;

my $opt = +{
    check_deps => 1,
};
GetOptions(
    'v|verbose!'              => \$opt->{verbose},
    's|skip-pod!'             => \$opt->{skip_pod},
    'q|quickfix!'             => \$opt->{quickfix},
    'h|help!'                 => \$opt->{help},
    'V|version!'              => \$opt->{version},
    'l|local-lib=s'           => \$opt->{local_lib},
    'L|local-lib-contained=s' => sub {
        $opt->{local_lib}      = $_[1];
        $opt->{self_contained} = 1;
    },
);

pod2usage 1 if $opt->{help};

if ($opt->{version}) {
    warn "App::pmgrep v$App::pmgrep::VERSION\n"; 
    exit;
}

pod2usage 1 if scalar @ARGV < 2;

main(@ARGV);
exit;

sub main {
    my $search = shift;
    my @modules = @_;

    if ($opt->{local_lib}) {
        setup_local_lib($opt->{local_lib}, $opt->{self_contained});
    }

    for my $module (@modules) {
        my($packlist) = locate_pack($module);

        unless ($packlist) {
            warn "$module is not installed.\n";
            next;
        }
        my @filelist = fixup_packilist($packlist, $opt->{local_lib});
        my @cmds = ("ack");
        if( $opt->{quickfix} ){
            push @cmds, ("--with-filename", "--nogroup" , "--nocolor" , "--nopager");
        }else{
            push @cmds, ("--with-filename", "--group" , "--nopager");
        }
        push @cmds, $search;
        for my $file (@filelist) {
            if( $opt->{verbose} ){
                my $mod = Module::Info::File->new_from_file($file);
                my $display_filename = Term::ANSIColor::colored( $mod->name, 'bold green' );
                print $display_filename, "\n";
            }

            if($opt->{skip_pod}){
                my ($tempfh, $tempname) = tempfile;
                print $tempfh pod_skip(slurp($file));
                close $tempfh;
                $file = $tempname;
            }

            my $cmd = join(" ", (@cmds, $file));
            system($cmd);
            warn $cmd if $opt->{verbose};
        }
    }
}

sub locate_pack {
    my $dist = shift;
    $dist =~ s!::!/!g;

    for my $lib (@inc) {
        my $packlist = "$lib/auto/$dist/.packlist";
        return $packlist if -f $packlist && -r _;
    }

    return;
}

sub fixup_packilist {
    my ($packlist, $local_lib_base) = @_;
    my @target_list;
    my $is_local_lib = is_local_lib($packlist, $local_lib_base);
    open my $in, "<", $packlist or die "$packlist: $!";
    while (my $file = <$in>) {
        if ($is_local_lib) {
            next unless is_local_lib($file, $local_lib_base);
        }
        chomp $file;
        push @target_list, $file if $file =~ m/\.pm$/;
    }
    return @target_list;
}

sub is_local_lib {
    my ($file, $local_lib_base) = @_;
    return 0 unless exists $INC{'local/lib.pm'};

    $local_lib_base ||= '~/perl5';
    $local_lib_base = quotemeta File::Spec->catfile(Cwd::realpath($local_lib_base));
    $file = File::Spec->catfile($file);

    return $file =~ /^$local_lib_base/ ? 1 : 0;
}

# taken from cpan-outdated
sub setup_local_lib {
    my ($base, $self_contained) = @_;
    $base ||= '~/perl5/';

    require local::lib;
    local $SIG{__WARN__} = sub { }; # catch 'Attempting to write ...'
    @inc = map { Cwd::realpath($_) } split $Config{path_sep},
        +{local::lib->build_environment_vars_for($base, $self_contained ? 0 : 1)}->{PERL5LIB};
    push @inc, @INC unless $self_contained;
}

sub slurp {
    my $file = shift;
    open my $fh, "<", $file;
    my $data = do{ local $/; <$fh>};
    close $fh;
    return $data;
}

sub pod_skip {
    my $data = shift;
    my $pod_skip = 0;
    my $res = '';
    for my $line (split /\n/, $data) {
        if ($line =~ /^=/) {
            $pod_skip = 1;
        } elsif ($line =~ /^=cut/) {
            $pod_skip = 0;
        } elsif($pod_skip != 1) {
            $res .= $line . "\n";
        }
    }
    return $res;
}

__END__

=head1 NAME

pm-grep - Grep modules

=head1 USAGE

pm-grep [options] Search-String Module ...

=head1 OPTIONS

=over 4

=item -v,--verbose

Turns on chatty output

=item -s,--skip-pod

Skip Pod

=item -q,--quickfix

Display for quickfix (vim / emacs?)

=item -h,--help

This help message

=item -V,--version

Show version

=item -l,--local-lib

Additional module path

=item -L,--local-lib-contained

Additional module path (don't include non-core modules)

=back

=head1 OTHER TOOLS

-head2 Vim integration

use pmgrep.vim

=cut

